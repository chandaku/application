group 'com.assignment'
version '1.0-SNAPSHOT'

bootJar {
	baseName = 'sample-service'
	version = '0.1.0'
}

test {
	reports {
		junitXml.enabled = true
		html.enabled = true
	}
}

ext {
	springBootVersion = '2.1.0.RELEASE'
	junit5Version = '5.1.0'
	docker_plugin_version = '0.20.1'

}
docker {
	dependsOn build
	name "${project.properties.getOrDefault('dockerHome', '')}" +
			"/${bootJar.baseName}"
	dockerfile file('src/main/resources/docker/Dockerfile')
	files bootJar.archivePath, "src/main/resources/docker/wait-for-it.sh"
	buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}



dependencies {
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation("org.springframework.cloud:spring-cloud-starter-kubernetes:0.3.0.RELEASE")
    implementation("org.springframework.cloud:spring-cloud-starter-kubernetes-netflix:0.2.0.RELEASE")
	testImplementation('io.projectreactor:reactor-test')
	testImplementation('com.github.tomakehurst:wiremock-standalone:2.16.0')
	testCompileOnly('com.github.tomakehurst:wiremock:2.1.12')
	testCompileOnly('junit:junit:4.12')
	testImplementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junit5Version}","org.junit.vintage:junit-vintage-engine:${junit5Version}")
}

test {
	reports {
		junitXml.enabled = true
		html.enabled = true
	}
}

docker {
	dependsOn build
	name "${project.properties.getOrDefault('DockerHubUsername', '')}" +
			"/${bootJar.baseName}"
	dockerfile file('src/main/resources/docker/Dockerfile')
	files bootJar.archivePath, "src/main/resources/docker/wait-for-it.sh"
	buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

def itest = "${rootProject.rootDir}"
apply from: "$itest/itest.gradle"




